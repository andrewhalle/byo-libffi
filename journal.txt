[2020-05-06T18:09:15-0700] I can break python by doing `mv /usr/lib/libffi.so.7 /usr/lib/alibffi.so.7`
                           then doing `python -c 'import ctypes'` so I can use python as a test case
                           for my libffi clone and install my clone at this location
[2020-05-06T18:11:28-0700] need to set up a virtual machine so I don't completely bork my system.
[2020-05-06T18:12:12-0700] will just use vagrant
[2020-05-06T18:17:06-0700] sudo pacman -S vagrant
                           sudo pacman -S libvirt
                           sudo systemctl enable libvirtd
                           sudo systemctl start libvirtd
                           vagrant plugin install vagrant-libvirt
                           sudo pacman -S ebtables dnsmasq
                           sudo systemctl restart libvirt
                           vagrant init generic/arch
                           vagrant up --provider=libvirt
[2020-05-06T19:36:26-0700] the above was failing on waiting for the IP address for a while, but then
                           worked when I destroyed and re `up`d. weird. anyway, in the box, I can
                           install python,
                           `ldconfig -p | grep ffi` and `rm /usr/lib/libffi.so.7` then try importing
                           ctypes in python, and I get the failure.
[2020-05-15T18:49:38-0700] some notes from the last week
[2020-05-15T18:49:52-0700] going to need to brush up on my assembly
[2020-05-15T18:50:08-0700] couple of resources to that effect
[2020-05-15T18:50:17-0700] https://www.cs.virginia.edu/~evans/cs216/guides/x86.html
                             - a good guide to assembly
[2020-05-15T18:51:32-0700] https://courses.cs.washington.edu/courses/cse378/10au/sections/Section1_recap.pdf
                             for the order in which arguments are passed in registers
[2020-05-15T18:52:59-0700] instead of starting with the python example, build to that.
                           start with a simple C example, build up my own interface, then
                           look at the interface exposed by the real libffi and map mine to that
[2020-05-15T18:53:42-0700] start with add function, compiled into a shared library, function type
                           specified at compile time
[2020-05-15T18:57:22-0700] https://linux.die.net/man/3/dlopen
[2020-05-15T19:06:01-0700] > clang -shared -fPIC -o libadd.so add.c
                           > clang -o main -ldl main.c
                           > ./main
                           1 + 2 = 3
[2020-05-15T19:06:48-0700] git commit 81048009d824a68a4e13cd0fb2236e3f58ac4082
[2020-05-15T19:08:37-0700] now, remove the typedef, and write some assembly to call the function
[2020-05-15T19:09:06-0700] compiler explorer to the rescue https://godbolt.org/z/U_prQu
[2020-05-15T19:11:44-0700] write a function that calls this assembly at runtime with a pointer
                           to where we know the function is from dlsym
[2020-05-15T19:12:34-0700] use NASM to write function runtime_call
[2020-05-15T20:03:21-0700] better compiler explorer link https://godbolt.org/z/yTaHL6
[2020-05-15T20:07:44-0700] copy the assembly from there, and we have a segfault!
[2020-05-15T20:07:56-0700] git commit 03f737841f966df978341153023a2ac5f565f95e
[2020-05-16T12:30:39-0700] just forgot to add the address of the function to the callable
                           struct, which was different from the layout of what I put into
                           compiler explorer, so, segfault
[2020-05-16T12:31:32-0700] think the next step is to write a verison of runtime-call that can
                           handle a runtime specified number of ints (restrict the type because
                           I don't know how I'm going to handle differently sized types yet)
[2020-05-17T11:11:02-0700] how to encode the calling convention in assembly
[2020-05-17T11:11:30-0700] what I'd like to do in C is create an array ["rdi", "rsi"] etc,
                           loop over the function arguments and load them into registers
                           in order, then push whatever's leftover to the stack. Since I can't
                           do that, I'll instead write all the instructions to move arguments
                           into registers, then jump to the right instruction based on how
                           many arguments there are. Any leftover arguments will go through a loop
                           that pushes an argument and increments to the next.
[2020-05-19T21:38:50-0700] https://godbolt.org/z/hnscAH
[2020-05-19T21:39:04-0700] can use the above as a template, basically confirms my skeleton
[2020-05-19T21:46:11-0700] by the way, if links to the compiler explorer prove anything, it's
                           that serious magic goes into compilers. I won't be striving for
                           efficiency, I just want something that works.
                           https://www.youtube.com/watch?v=w0sz5WbS5AM for more
[2020-05-19T21:51:51-0700] also found this https://cs61.seas.harvard.edu/site/2018/Asm2/
[2020-05-19T22:24:38-0700] note to self, certain registers have restrictions on where they
                           can be referenced (e.g. can't jmp eax in 64-bit mode) workaround
                           is to mov into the 32-bit version to zero out the upper part of
                           the register, then reference the 64 bit version
[2020-05-19T22:26:12-0700] nasm -f elf64 runtime-call.s
[2020-05-19T22:28:42-0700] segfault is coming from the jmp instruction, cannot access memory
                           at 0x4 (good because computing jmp correctly, just need to figure
                           out how to make it relative)
[2020-05-19T22:33:33-0700] maybe relative jumps with a computed value aren't really possible
                           in 64-bit mode. Need to look more into this. In the meantime, can
                           achieve the same thing with a bit of a nasty cmp / label scheme
[2020-05-19T22:50:50-0700] 1 + 2 = 21936
[2020-05-19T22:50:58-0700] not a segfault!
[2020-05-19T22:51:02-0700] what in the world am I passing as arguments?
[2020-05-19T22:52:55-0700] actually passing the right thing! must be corrupting the return value
                           somehow
[2020-05-19T23:04:22-0700] working! really just had the wrong address for retval
[2020-05-19T23:04:46-0700] 2 and 3 args works, 10 args doesn't crash, but returns the wrong
                           answer for 10 (sum of natural numbers, returns 48 when it should
                           return 55)
